@model Tuhu.Component.Common.Models.ListModel<ThBiz.DataAccess.Entity.PurchaseTaskInfo>
@{
    Layout = "../Shared/_Inner.cshtml";
}
<div class="col-md-12 row">
    @using (Html.BeginForm("ExportTaskPool", "PurchaseOrder", FormMethod.Post, new {@class = "form-inline", @id = "SearchForm" }))
    {
        <div class="form-group">
            <label class="control-label">类别</label>
            <select name="Category" class="form-control" style="width: 100px;">
                <option selected="" value="">请选择</option>
                <option value="轮胎">轮胎</option>
                <option value="保养">保养</option>
            </select>
        </div>
        <div class="form-group">
            <label class="control-label">品牌</label>
            @Html.DropDownList("Brand", new SelectList(ViewBag.ProductBrandList, "CP_Brand", "CP_Brand"), "请选择", new {@style = "width: 150px;", @class = "form-control"})
        </div>
        <div class="form-group">
            <label class="control-label">产品名称</label>
            @Html.TextBox("ProductName", "", new {@class = "form-control", style = "width: 150px;"})
        </div>
        <div class="form-group">
            <label class="control-label">区域</label>
            @Html.DropDownList("WarehouseGroupName", new SelectList(ViewBag.Area, "Area", "Area"), "请选择", new {@style = "width: 120px;", @class = "form-control", onchange = "changHouse(this);"})
        </div>
        <div class="form-group">
            <label class="control-label">仓库</label>
            @Html.DropDownList("WarehouseName", new SelectList(ViewBag.HouseWare, "WareHouseName", "WareHouseName"), "请选择", new {@style = "width: 120px;", @class = "form-control"})
        </div>
        <div class="form-group">
            <label class="control-label">任务状态</label>
            @Html.DropDownList("TaskState", new SelectList(ViewBag.TaskState, "text", "text"), "请选择", new {@style = "width: 120px;", @class = "form-control"})
        </div>
        <div class="form-group">
            <label class="control-label">任务主人</label>
            @Html.DropDownList("CreateBy", new SelectList(ViewBag.CreateBy, "EmailAddress", "EmployeeName"), "请选择", new {@style = "width: 150px;", @class = "form-control"})
        </div>
        <div class="form-group">
            <label class="control-label">创建时间</label>
            <input name="BeginTime" id="begin" class="form-control" style="width: 120px;" onclick="WdatePicker({ dateFmt: 'yyyy-MM-dd', skin: 'blueFresh', maxDate: '#F{$dp.$D(\'end\')}' })"/> 至
            <input name="EndTime" id="end" class="form-control" style="width: 120px;" onclick="WdatePicker({ dateFmt: 'yyyy-MM-dd', skin: 'blueFresh', minDate: '#F{$dp.$D(\'begin\')}' })"/>
        </div>
        <div class="form-group">
            <button type="button" class="btn btn-sm btn-info" onclick="searchList();">查询</button>
        </div>
        <div class="form-group">
            <button type="submit" class="btn btn-sm btn-success" id="btnexport">导出</button>
        </div>
        <div class="form-group">
            <button type="button" class="btn btn-sm btn-primary" onclick="AssignmentTask();">分配任务</button>
        </div>
        <div class="form-group">
            <button type="button" class="btn btn-sm btn-danger" onclick="addTaskPlace();">新建采购任务</button>
        </div>

    }<br/>
    <div id="dataList">
        @Html.Partial("TaskPoolList")
    </div>
</div>
<input type="hidden" id="ownerName"/>
<div id="taskMaster" style="display: none">
    <div class="form-inline form-group" style="margin: 15px;">
        <label class="control-label" style="font-size: 16px;">任务主人</label>
        @Html.DropDownList("TaskOwner", new SelectList(ViewBag.CreateBy, "EmailAddress", "EmployeeName"), "请选择", new { @style = "width: 250px;", @class = "form-control", @onchange= "$('#ownerName').val($(this).val());" })
    </div>
</div>
<script type="text/javascript">
    $(function () {
        //导出Excel
        $("#btnexport").click(function () {
            if (confirm('确认导出数据？')) {
                return true;
            } else {
                return false;
            };
        });
        $("#Brand").select2();
        $("#CreateBy").select2();
        $("#WarehouseName").select2();
        $("#dataList").on("click", ".pager > a", function (event) {
            event.preventDefault();
            if (this.href !== "") {
                var load = layer.load();
                $("#SearchForm").ajaxSubmit({
                    url: this.href,
                    data: { "Type": "Search" },
                    success: function (html) {
                        layer.close(load);
                        $("#dataList").html(html);
                    },
                    error: function () {
                        layer.close(load);
                        alert("翻页失败！");
                    }
                });
            } else {
                return false;
            }
            return true;
        });

    });
    //检索
    function searchList() {
        var load = layer.load();
        $("#SearchForm").ajaxSubmit({
            url: '/PurchaseOrder/TaskPoolIndex',
            data: { "Type": "Search" },
            success: function (html) {
                layer.close(load);
                $("#dataList").html(html);
            },
            error: function () {
                layer.close(load);
                alert("查询失败！");
            }
        });
    }
    //下拉框动态更改仓库信息
    function changHouse(sel) {
        $.ajax({
            type: 'GET',
            async: false,
            url: "/PurchaseOrder/GetHousesByArea",
            data: { "area": sel.value,"type" : 2 },
            success: function (result) {
                $("#WarehouseName").html(result);
            },
            error: function () {
                alert("获取仓库数据失败！");
            }
        });

    }
    //全选，取消
    function checkAll(col) {
        var list = $("input[name='pcheck']");
        if ($(col).prop('checked')) {
            for (var j = 0; j < list.length; j++) {
                list[j].checked = true;
            }
        } else {
            for (var i = 0; i < list.length; i++) {
                list[i].checked = false;
            }
        }
    }
    //分配任务
    function AssignmentTask() {
        var ids = "";
        $("#dataList").find("input[type=checkbox][name=pcheck]:checked").map(function () {
            var id = $(this).attr("data-id");
            ids += ids === "" ? id : "," + id;
        });
        if (ids === "") {
            layer.msg("请选择至少一个任务！", { icon: 0, time: 2000 });
            return false;
        }
        layer.open({
            type: 1,
            title: "分配任务",
            skin: 'layui-layer-rim',
            content: $("#taskMaster").html(),
            area: ['375px', '180px'], //宽高
            btn: ['确定', '取消'],
            yes: function () {
                var owner = $("#ownerName").val();
                if (owner == "" || typeof owner == "undefined") {
                    layer.msg("请选择任务主人！", { icon: 0, time: 2000 });
                    return false;
                }
                $.ajax({
                    url: "/PurchaseOrder/AssignPurchaseTaskMaster",
                    data: { "master": owner, "ids": ids },
                    type: "GET",
                    beforeSend: function () {
                        layer.load(2);
                    },
                    success: function (result) {
                        layer.closeAll();

                        if (result) {
                            layer.msg("分配任务成功！", { icon: 1, time: 2000 }, function() {
                                searchList();
                            });
                        } else {
                            layer.msg("分配任务失败！", { icon: 0, time: 2000 });
                        }
                    },error: function() {
                        layer.closeAll();
                        layer.msg("网络传输错误！", { icon: 2, time: 2000 });
                    }
                });
            },
            cancel: function () { }
        });
    }
    //新建采购任务
    function addTaskPlace() {
        parent.layer.open({
            type: 2,
            title: "创建采购任务",
            skin: 'layui-layer-rim',
            content: "/PurchaseOrder/AddPurchaseTask",
            area: ['1030px', '650px'], //宽高
            btn: ['提交采购', '取消'],
            yes: function (index) {
                var body = parent.layer.getChildFrame('body', index).contents();

                var vendorId = body.find("#VendorId").val();//供应商id
                if (vendorId == "" || vendorId == null) {
                    parent.layer.msg("未选择供应商！", { icon: 0, time: 2000 });
                    return false;
                }
                var vendorName = body.find("#VendorId").find("option:selected").text();//供应商名称
                var wareHouseId = body.find("#WareHouse").val();//仓库id
                if (wareHouseId == "" || typeof wareHouseId == "undefined") {
                    parent.layer.msg("未选择仓库！", { icon: 0, time: 2000 });
                    return false;
                }
                var wareHouseName = body.find("#WareHouse").find("option:selected").text();//仓库名称
                var pickWay = body.find("#pickWay").val();//提货方式
                if (pickWay === "" || typeof pickWay === "undefined") {
                    parent.layer.msg("未选择提货方式！", { icon: 0, time: 2000 });
                    return false;
                }
                var purmode = body.find("#purchMode").val();//采购方式
                var planDate = body.find("#planedDate").val();//预计到货日期
                if (planDate === "" || typeof planDate === "undefined") {
                    parent.layer.msg("未选择预计提货日期！", { icon: 0, time: 2000 });
                    return false;
                }
                var rate = body.find("#rate").val();//税率
                if (rate === "" || typeof rate === "undefined") {
                    parent.layer.msg("未选择税率！", { icon: 0, time: 2000 });
                    return false;
                }
                var tallyType = body.find("#tallyType").val();//运费记账类型
                var tfreight = body.find("#tfreight").val();//总运费
                if (tfreight === "" || parseFloat(tfreight) < 0 || typeof tfreight === "undefined") {
                    parent.layer.msg("总运费不能为空或小于0！", { icon: 0, time: 2000 });
                    return false;
                }

                if (body.find("#pbody tr[did!=0]").length === 0) {
                    parent.layer.msg("未添加任何产品！", { icon: 0, time: 2000 });
                    return false;
                }
                var plist = [];
                for (var i = 0; i < body.find("#pbody tr[did!=0]").length ; i++) {
                    var tdArr = $(body.find("#pbody tr[did!=0]")[i]).find("td");

                    var pkid = $(body.find("#pbody tr[did!=0]")[i]).attr("did"); //id
                    var pid = $(body.find("#pbody tr[did!=0]")[i]).attr("pid"); //产品编号
                    if (pid === "" || typeof pid == "undefined") {
                        parent.layer.msg("第" + (i + 1) + "行，采购产品数据错误！", { icon: 0, time: 2000 });
                        return false;
                    }
                    var pname = tdArr.eq(1).text(); //产品名称
                    var pcount = tdArr.eq(2).find('input').val(); //采购数量
                    if (pcount === "" || parseInt(pcount) <= 0 || typeof pcount == "undefined") {
                        parent.layer.msg("第" + (i + 1) + "行，采购数量必须大于0！", { icon: 0, time: 2000 });
                        return false;
                    }
                    var pprice = tdArr.eq(3).find('input').val(); //采购价格
                    if (pprice === "" || parseFloat(pprice) <= 0 || typeof pprice === "undefined") {
                        parent.layer.msg("第" + (i + 1) + "行，采购价格必须大于0！", { icon: 0, time: 2000 });
                        return false;
                    }
                    var freight = tdArr.eq(4).text(); //运费单价
                    if (freight === "" || parseFloat(freight) < 0 || typeof freight === "undefined") {
                        parent.layer.msg("第" + (i + 1) + "行，运费不能小于0！", { icon: 0, time: 2000 });
                        return false;
                    }
                    var remark = tdArr.eq(5).find("input").val(); //修改原因
                    plist.push({
                        "PKID": pkid,
                        "ProductName": pname,
                        "PID": pid,
                        "PurchasePrice": pprice,
                        "PurchaseCount": pcount,
                        "FreightPrice": freight,
                        "Remark": remark
                    });
                }
                var order = {
                    "VendorId": vendorId,
                    "VendorName": vendorName,
                    "WareHouseId": wareHouseId,
                    "WareHouseName": wareHouseName,
                    "ShipmentType": pickWay,
                    "PurchaseMode": purmode,
                    "DeliveryDate": planDate,
                    "VendorRate": rate,
                    "FreightType": tallyType,
                    "TotalFreight": tfreight,
                    "OrderProductList": plist
                }

                var loading;
                $.ajax({
                    url: "/PurchaseOrder/PresentTaskPlaceOrder",
                    data: { "purchOrder": JSON.stringify(order) },
                    dataType: "json",
                    type: "POST",
                    beforeSend: function () {
                        loading = parent.layer.load();
                    },
                    complete: function () {
                        parent.layer.close(loading);
                    },
                    success: function (result) {
                        if (result.indexOf("成功") > 0) {
                            parent.layer.msg(result, {
                                icon: 1,
                                time: 2000
                            }, function () {
                                parent.layer.closeAll();
                            });
                        } else {
                            parent.layer.msg(result, { icon: 1, time: 2000 });
                        }
                    },
                    error: function () {
                        parent.layer.msg("提交数据失败！", { icon: 2, time: 2000 });
                    }
                });

            },
            cancel: function () { }
        });

    }
</script>
